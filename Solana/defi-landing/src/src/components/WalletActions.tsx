import { useWallet } from "@solana/wallet-adapter-react";
import { Connection, PublicKey, LAMPORTS_PER_SOL } from "@solana/web3.js";
import { useEffect, useState } from "react";
import { swapRaydium } from "../utils/raydiumSwap"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é

const connection = new Connection("https://api.mainnet-beta.solana.com"); // –ú–µ–Ω—è–µ–º –Ω–∞ –º–µ–π–Ω–Ω–µ—Ç

export function WalletActions() {
  const { publicKey, wallet } = useWallet();
  const [balance, setBalance] = useState<number | null>(null);
  const [isLoading, setIsLoading] = useState(false);

  useEffect(() => {
    if (publicKey) {
      connection.getBalance(publicKey).then(bal => {
        setBalance(bal / LAMPORTS_PER_SOL);
      });
    }
  }, [publicKey]);

  // –†–ï–ê–õ–¨–ù–ê–Ø –ø–æ–∫—É–ø–∫–∞ SOL —á–µ—Ä–µ–∑ —Å–≤–∞–ø USDC -> SOL
  const buySol = async () => {
    if (!publicKey || !wallet) return;
    
    setIsLoading(true);
    try {
      // USDC -> SOL —Å–≤–∞–ø —á–µ—Ä–µ–∑ Raydium
      const txId = await swapRaydium({
        wallet,
        poolId: "58oQChx4yWmvKdwLLZzBi4ChoCc2fqCUWBkwMihLYQo2", // USDC/SOL –ø—É–ª
        inputMint: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v", // USDC mint
        outputMint: "So11111111111111111111111111111111111111112", // SOL mint
        amountIn: 10, // 10 USDC
        slippagePct: 1.0, // 1% slippage
        connection
      });

      alert(`‚úÖ –ü–æ–∫—É–ø–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! TX: ${txId}`);
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —Å–≤–∞–ø–∞
      const newBalance = await connection.getBalance(publicKey);
      setBalance(newBalance / LAMPORTS_PER_SOL);

    } catch (error: any) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏:", error);
      alert(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    } finally {
      setIsLoading(false);
    }
  };

  // –†–ï–ê–õ–¨–ù–ê–Ø –ø—Ä–æ–¥–∞–∂–∞ SOL —á–µ—Ä–µ–∑ —Å–≤–∞–ø SOL -> USDC
  const sellSol = async () => {
    if (!publicKey || !wallet) return;
    
    setIsLoading(true);
    try {
      // SOL -> USDC —Å–≤–∞–ø —á–µ—Ä–µ–∑ Raydium
      const txId = await swapRaydium({
        wallet,
        poolId: "58oQChx4yWmvKdwLLZzBi4ChoCc2fqCUWBkwMihLYQo2", // USDC/SOL –ø—É–ª
        inputMint: "So11111111111111111111111111111111111111112", // SOL mint
        outputMint: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v", // USDC mint
        amountIn: 0.1, // 0.1 SOL
        slippagePct: 1.0, // 1% slippage
        connection
      });

      alert(`‚úÖ –ü—Ä–æ–¥–∞–∂–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! TX: ${txId}`);
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —Å–≤–∞–ø–∞
      const newBalance = await connection.getBalance(publicKey);
      setBalance(newBalance / LAMPORTS_PER_SOL);

    } catch (error: any) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏:", error);
      alert(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="mt-4">
      {publicKey && (
        <>
          <p>üí∞ –ë–∞–ª–∞–Ω—Å: {balance !== null ? balance.toFixed(4) : "–ó–∞–≥—Ä—É–∑–∫–∞..."} SOL</p>
          <div className="flex space-x-4 mt-2">
            <button
              onClick={buySol}
              disabled={isLoading}
              className="bg-green-600 px-4 py-2 rounded hover:bg-green-700 disabled:opacity-50"
            >
              {isLoading ? "‚è≥..." : "üü¢ –ö—É–ø–∏—Ç—å SOL –∑–∞ USDC"}
            </button>
            <button
              onClick={sellSol}
              disabled={isLoading}
              className="bg-red-600 px-4 py-2 rounded hover:bg-red-700 disabled:opacity-50"
            >
              {isLoading ? "‚è≥..." : "üî¥ –ü—Ä–æ–¥–∞—Ç—å SOL –∑–∞ USDC"}
            </button>
          </div>
        </>
      )}
    </div>
  );
}